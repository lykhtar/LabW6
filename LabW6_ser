public class MyPojo {

    private Schedule schedule;

    public Schedule getSchedule() {
        return schedule;
    }

    public void setSchedule(Schedule schedule) {
        this.schedule = schedule;
    }

    @Override
    public String toString() {
        return "Pojo [schedule = " + schedule + "]";
    }
}

public class Schedule {

    private Teachers teachers;
    private Lessons lessons;

    public Teachers getTeachers() {
        return teachers;
    }

    public void setTeachers(Teachers teachers) {
        this.teachers = teachers;
    }

    public Lessons getLessons() {
        return lessons;
    }

    public void setLessons(Lessons lessons) {
        this.lessons = lessons;
    }

    public String toString() {
        return "Schedule [teachers = " + teachers + ", lessons = " + lessons + "]";
    }
}

public class Lessons {

    private String name;
    private String classroom;
    private String day;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getClassroom() {
        return classroom;
    }

    public void setClassroom(String classroom) {
        this.classroom = classroom;
    }

    public String getDay() {
        return day;
    }

    public void setDay(String day) {
        this.day = day;
    }

    @Override
    public String toString() {
        return "Lessons [name = " + name + ", classroom = " + classroom + ", day = " + day + "]";
    }
}

public class Teachers {

    private String name;
    private Lesson lesson;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Lesson getLesson() {
        return lesson;
    }

    public void setLesson(Lesson lesson) {
        this.lesson = lesson;
    }

    @Override
    public String toString() {
        return "Teachers[name = " + name + ", lesson = " + lesson + "]";
    }
}

public class Lesson {

    private String namstud;
    private String name;
    private String numles;

    public String getNamstud() {
        return namstud;
    }

    public void setNamstud(String namstud) {
        this.namstud = namstud;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getNumles() {
        return numles;
    }

    public void setNumles(String numles) {
        this.numles = numles;
    }

    @Override
    public String toString() {
        return "Lesson [namstud = " + namstud + ", name = " + name + ", numles = " + numles + "]";
    }
}

import java.io.*;

public class Serializator {

    public boolean serialization(Ser s, String fileName) {
        boolean flag = false;
        File f = new File("ser.txt");
        ObjectOutputStream ostream = null;
        try {
            FileOutputStream fos = new FileOutputStream(f);
            if (fos != null) {
                ostream = new ObjectOutputStream(fos);
                ostream.writeObject(s);
                // сериализация
                flag = true;
            }
        } catch (FileNotFoundException e) {
            System.err.println("Файл не может быть создан: " + e);
        } catch (NotSerializableException e) {
            System.err.println("Класс не поддерживает сериализацию: " + e);
        } catch (IOException e) {
            System.err.println(e);
        } finally {
            try {
                if (ostream != null) {
                    ostream.close();
                }
            } catch (IOException e) {
                System.err.println("ошибка закрытия потока");
            }
        }
        return flag;
    }

    public Ser deserialization(String fileName) throws InvalidObjectException {
        File fr = new File("ser.txt");
        ObjectInputStream istream = null;
        try {
            FileInputStream fis = new FileInputStream(fr);
            istream = new ObjectInputStream(fis);
        // десериализация
            Ser ser = (Ser) istream.readObject();
            return ser;
        } catch (ClassNotFoundException ce) {
            System.err.println("Класс не существует: " + ce);
        } catch (FileNotFoundException e) {
            System.err.println("Файл для десериализации не существует: " + e);
        } catch (InvalidClassException ioe) {
            System.err.println("Несовпадение версий классов: " + ioe);
        } catch (IOException ioe) {
            System.err.println("Общая I/O ошибка: " + ioe);
        } finally {
            try {
                if (istream != null) {
                    istream.close();
                }
            } catch (IOException e) {
                System.err.println("ошибка закрытия потока ");
            }
        }
        throw new InvalidObjectException("объект не восстановлен");
    }
}

import java.io.InvalidObjectException;

public class RunnerSerialization {

    public static void main(String[] args) {// создание и запись объекта
        Ser ob = new Ser("1", "1", "math", "Kate", "Math");
        System.out.println(ob);
        String file = "E:\\КПО\\LabW6\\save.txt";
        Serializator sz = new Serializator();
        boolean b = sz.serialization(ob, file);

// изменение значения static-поля
// чтение и вывод объекта
        Ser res = null;
        try {
            res = sz.deserialization(file);
        } catch (InvalidObjectException e) {// обработка
            e.printStackTrace();
        }
        System.out.println(res);
    }
}
